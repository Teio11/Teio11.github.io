<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>zaizheli</title>
      <link href="/2024/09/10/zaizheli/"/>
      <url>/2024/09/10/zaizheli/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java悲观锁与乐观锁介绍，优缺点</title>
      <link href="/2024/09/10/Java%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2024/09/10/Java%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E4%BB%8B%E7%BB%8D%EF%BC%8C%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是锁，为什么需要锁"><a href="#什么是锁，为什么需要锁" class="headerlink" title="什么是锁，为什么需要锁"></a>什么是锁，为什么需要锁</h1><p>​    在Java中，锁是一种同步机制，用于<strong>控制多个线程对共享资源的访问</strong>。共享资源可以是变量、方法或对象。当多个线程同时尝试访问共享资源时，可能会发生竞争条件，导致不可预测的行为。</p><h2 id="数据错误例子"><a href="#数据错误例子" class="headerlink" title="数据错误例子"></a>数据错误例子</h2><blockquote><p>假设有一个简单的股票交易系统，其中两个线程分别代表买家和卖家。买家线程和卖家线程同时尝试购买和卖出股票，但是没有使用锁来保护共享资源。</p><ol><li>买家线程和卖家线程同时检查库存，结果都发现还有股票可供购买或出售。于是，两个线程同时减少库存，导致库存数量减少两次，从而导致数据错误。</li><li>买家线程和卖家线程同时尝试增加库存，但由于买方和卖方都在尝试增加同一个变量（stockCount）的值，可能导致该变量的值不正确。</li><li>买家线程和卖家线程同时增加买家和卖家的股票数量，可能导致两个线程增加的数量不正确，从而导致数据错误。</li></ol></blockquote><p>​    为了确保对共享资源的访问不会发生冲突，需要使用锁来<strong>保证同一时刻只有一个线程能够访问共享资源</strong>。</p><p>悲观锁和乐观锁都是一种锁优化策略，用于减少锁的使用和锁竞争，从而提高并发性能。</p><h1 id="什么是悲观锁"><a href="#什么是悲观锁" class="headerlink" title="什么是悲观锁"></a>什么是悲观锁</h1><p>​    当多个线程同时尝试获取同一个锁时，悲观锁策略会假设最坏的情况，即假定多个线程同时获取锁会导致数据不一致。因此，它会采取一种较为保守的策略，避免多个线程同时获取锁。</p><blockquote><p>对数据采取“悲观”态度，认为数据随时都有可能被别人改。</p><p>读取的时候就开始霸占，别人想改得排队，等我改完再说。</p></blockquote><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><blockquote><p>\1. 有序队列</p><p>\2. 无重试开销</p><p>\3. 业务开发无需复杂的适配逻辑，符合线性开发思维</p></blockquote><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><blockquote><ol><li>产生饥饿：在某些情况下，悲观锁可能会导致饥饿现象，即<strong>某些线程长时间得不到锁</strong>，而其他线程却可以随时获得锁。这可能会导致某些线程长时间处于阻塞状态，从而影响程序的性能。</li><li>资源占用：悲观锁在等待锁的过程中会<strong>占用CPU资源</strong>，从而可能导致CPU资源占用过高。</li><li>死锁：在某些情况下，悲观锁可能会导致死锁现象，即<strong>多个线程相互等待对方释放锁</strong>，从而导致程序无法继续执行。</li></ol></blockquote><h1 id="什么是乐观锁"><a href="#什么是乐观锁" class="headerlink" title="什么是乐观锁"></a>什么是乐观锁</h1><p>​    乐观锁的核心思想是在获取锁之前先进行尝试性读取共享资源，如果读取成功，则认为没有其他线程同时访问该资源，可以获取锁并进行写入操作。如果读取失败，则说明有其他线程同时访问该资源，需要重新进行读取并尝试获取锁。</p><blockquote><p>对数据采取“乐观”态度，认为我在修改数据的同时，数据大概率不会被别人动过。</p><p>读数据不独占，而是保存修改的时候再检查一下是否变更（同时），如果被改过了，就重读重做。</p></blockquote><h2 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h2><blockquote><p>\1. 无堵塞风险</p><p>\2. 业务不排队，高效率优先</p><p>\3. 最大化整体效率</p></blockquote><h2 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h2><blockquote><ol><li>代码复杂性：在使用乐观锁时，需要考虑重试策略、超时等问题，这可能会导致代码复杂性增加，维护成本提高。</li><li>如果发生了频繁的业务间修改冲突，就会引发频繁重复的重试，造成计算资源的浪费。</li><li>并发读操作：在乐观锁中，读取操作不需要加锁，因此可能会有多个线程同时进行读取操作，这可能会导致读取结果不一致。</li></ol></blockquote><h1 id="悲观锁与乐观锁哪个更好"><a href="#悲观锁与乐观锁哪个更好" class="headerlink" title="悲观锁与乐观锁哪个更好"></a>悲观锁与乐观锁哪个更好</h1><p>各业务之间处理时间相近：悲观锁</p><p>各业务之间处理时间差异大：乐观锁</p><p>并非绝对，根据具体情况调整</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/07/hello-world/"/>
      <url>/2024/07/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
